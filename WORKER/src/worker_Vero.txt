/*
 ============================================================================
 Name        : WORKER.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h> //Biblioteca estandard para entrada y salida
#include <stdlib.h> //Manejo de memoria dinamica y otros
#include <string.h> //Biblioteca estandard para el manejo de strings
#include <stdbool.h> //Para incluir el tipo de dato bool, y usar true y false
#include <sys/socket.h> //Necesaria para socket() e inet_addr()
#include <netinet/in.h> //Necesaria para inet_addr()
#include <arpa/inet.h> //Necesaria para inet_addr()
#include <sys/types.h> //Necesaria para socket() y stat()
#include <unistd.h> //Necesaria para close() -> Para cerrar un socket
#include <fcntl.h>
#include <sys/mman.h> // Para mmap
#include <sys/stat.h>
#include <signal.h>
#include <commons/config.h> //Necesaria para manipular el archivo de configuracion (config.txt)
#include <commons/log.h> //Biblioteca para el manejo de archivos de log creada por la cátedra
#include <commons/string.h> //Biblioteca para el manejo de strings creada por la cátedra
#include <shared/sockets.h>
#include <shared/protocolo.h>
#include <sys/wait.h>
#include <shared/funcionesAuxiliares.h> //Necesaria para tamanioArchivo()
#include <shared/mensajes.h> // Biblioteca exclusiva para la gestión de mensajes
#include <shared/archivos.h> // Biblioteca para mapeo de archivos data.bin, get_bloque, set_bloque, etc...
#include "funcionesWorker.h"

//señal para controlar al proceso hijo
void sigchld_handler(int s){
	while(wait(NULL) > 0);
 }

/***** INICIO MAIN *****/
int main(int argc, char* argv[]) {

		/*
		===================================
		INICIO CONFIGURACION WORKER
		===================================
		*/

		//Lo primero es crear el archivo de log (WORKER.log) para registrar la traza de ejecución del proceso WORKER
		log_WORKER = log_create("WORKER.log","WORKER", true, LOG_LEVEL_TRACE);

		// WORKER (N) espera conexiones de MASTER (N), por lo que debe tener un puerto de escucha
		int PUERTO_ESCUCHA_MASTER;//PUERTO_WORKER_ESCUCHA_MASTER
		char* RUTA_DATABIN;

		// Levanto el archivo de configuración (config.txt) y cargo la RUTA del archivo data.bin y el PUERTO de escucha para procesos MASTER
		t_config* config = configuracion_WORKER("../../DATANODE/config.txt", &RUTA_DATABIN, &PUERTO_ESCUCHA_MASTER);

		/* Mapeo el archivo data.bin del Nodo en memoria, así ya lo tengo cargado para posteriores consultas.
		 * IMPORTANTE: Si soy un WORKER y el archivo data.bin no existe NO puedo crearlo (eso le corresponde al DATANODE).
		 */
		void* databin_mapeado = map_databin(RUTA_DATABIN, WORKER, log_WORKER);
		if (databin_mapeado == NULL){
			return EXIT_FAILURE;
		}

		/*
		--------------------------------------------------
		FIN CONFIGURACION WORKER
		--------------------------------------------------
		*/


		/*
		=============================================
		INICIO PROCESAMIENTO SOLICITUDES DE MASTER
		=============================================
		*/

		struct sockaddr_in direccion_WORKER = nuevaDireccion(PUERTO_ESCUCHA_MASTER, "INADDR_ANY");
		int socket_escucha = ponerseALaEscuchaEn(direccion_WORKER);

		struct sockaddr_in direccion_cliente;
		int socket_cliente, pid;
		struct sigaction sa;

		void* buffer = malloc(sizeof(int));
		t_protocolo* protocoloRecepcion;
		sa.sa_handler = sigchld_handler; // Eliminar procesos muertos
		sigemptyset(&sa.sa_mask);
		sa.sa_flags = SA_RESTART;
		if (sigaction(SIGCHLD, &sa, NULL) == -1) {
			perror("sigaction");
			exit(1);
		 }

		while(true){

			//De MASTER recibira un codigo a ejecutar, un origen y un destino.
			socket_cliente = aceptar_clienteEn(socket_escucha, direccion_cliente);
			if (socket_cliente <1){
				perror("Falló en la función accept.");
				return EXIT_FAILURE;
			}
			pid = fork();
			if ( pid > 0){
				//estoy en el padre
				printf ("El padre esta a la escucha de mas conexiones");
				//printf("El mensaje enviado por el cliente %d es %s", socket_cliente, (char*)buffer);
				//exit(-1);
			} else {
				if(pid == 0){
					//estoy en el hijo
					printf("Nueva conexion en el socket %d, la IP es %s, el puerto es %d", socket_cliente, inet_ntoa(direccion_cliente.sin_addr), ntohs(direccion_cliente.sin_port));
					protocoloRecepcion = recibir_mensaje(socket_cliente);
					if (protocoloRecepcion == CERRARON_SOCKET) {
						// Conexión cerrada desde el cliente
						log_trace(log_WORKER, "Se cerro el socket involucrado.", socket_cliente);
					}
					if ( protocoloRecepcion == NULL){
						log_trace(log_WORKER, "Hubo un error al recibir un mensaje en el socket %d.", socket_cliente);
						close(socket_cliente);// Cierro el socket hay un fallo
					} else{
						definirAccionEjecucionHeader(protocoloRecepcion, socket_cliente);
						// Envio a MASTER el OK
						enviar_mensaje(SCRIPT_TRANSFORMADOR_OK, protocoloRecepcion->mensaje, socket_cliente);
						exit(-1);
					}

					close(socket_cliente);
					eliminarProtocolo(protocoloRecepcion);

				}else{
					//error
					log_error(log_WORKER,"Error en el fork");
					return ERROR;
				}
			}
		}

		/*
		--------------------------------------------------
		FIN PROCESAMIENTO SOLICITUDES DE MASTER
		--------------------------------------------------
		*/


		/*
		==================================================
		INICIO CIERRE Y LIBERACION DE RECURSOS GENERALES
		==================================================
		*/

		unmap_databin(RUTA_DATABIN, databin_mapeado, log_WORKER); // Hacemos el unmap del archivo data.bin
		config_destroy(config); // Libero la memoria utilizada por las funciones del archivo de configuración
		log_destroy(log_WORKER); // Libero la memoria utilizada por las funciones de log

		/*
		--------------------------------------------------
		FIN CIERRE Y LIBERACION DE RECURSOS GENERALES
		--------------------------------------------------
		*/

		return EXIT_SUCCESS;

}
/***** FIN MAIN *****/

